package net.zhira.varioutil.sql;

import net.zhira.varioutil.util.CheckedFunction;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Objects;

public final class SqlAdapter implements AutoCloseable {
    private ConnectionProvider provider = ConnectionProvider.NOT_ESTABLISHED;

    public ConnectionProvider getProvider() {
        return provider;
    }

    public void setProvider(ConnectionProvider provider) {
        Objects.requireNonNull(provider, "provider");
        this.provider = provider;
    }

    private static void applyArgs(PreparedStatement statement, Object[] args) throws SQLException {
        for (int i = 0, j = 1; i < args.length; i++, j++) {
            statement.setObject(j, args[i]);
        }
    }

    public <T> T prepareStatement(CheckedFunction<PreparedStatement, T, SQLException> function, String query, Object... args) throws SqlException {
        try (PreparedStatement statement = provider.getConnection().prepareStatement(query)) {
            applyArgs(statement, args);
            return function.apply(statement);
        } catch (SQLException e) {
            throw new SqlException(e);
        }
    }

    public <T> T prepareStatement(int autoGeneratedKeys, CheckedFunction<PreparedStatement, T, SQLException> function, String query, Object... args) throws SqlException {
        try (PreparedStatement statement = provider.getConnection().prepareStatement(query, autoGeneratedKeys)) {
            applyArgs(statement, args);
            return function.apply(statement);
        } catch (SQLException e) {
            throw new SqlException(e);
        }
    }

    public <T> T prepareStatement(String[] columnNames, CheckedFunction<PreparedStatement, T, SQLException> function, String query, Object... args) throws SqlException {
        try (PreparedStatement statement = provider.getConnection().prepareStatement(query, columnNames)) {
            applyArgs(statement, args);
            return function.apply(statement);
        } catch (SQLException e) {
            throw new SqlException(e);
        }
    }

    public <T> T executeQuery(CheckedFunction<ResultSet, T, SQLException> function, String query, Object... args) throws SqlException {
        return prepareStatement(statement -> {
            try (ResultSet set = statement.executeQuery()) {
                return function.apply(set);
            }
        }, query, args);
    }

    public <T> T executeQuery(int autoGeneratedKeys, CheckedFunction<ResultSet, T, SQLException> function, String query, Object... args) throws SqlException {
        return prepareStatement(autoGeneratedKeys, statement -> {
            try (ResultSet set = statement.executeQuery()) {
                return function.apply(set);
            }
        }, query, args);
    }

    public <T> T executeQuery(String[] columnNames, CheckedFunction<ResultSet, T, SQLException> function, String query, Object... args) throws SqlException {
        return prepareStatement(columnNames, statement -> {
            try (ResultSet set = statement.executeQuery()) {
                return function.apply(set);
            }
        }, query, args);
    }

    public boolean isClosed() {
        return provider.isClosed();
    }

    public void close() {
        if (!provider.isClosed()) {
            provider.close();
        }
        provider = ConnectionProvider.CLOSED;
    }
}
